// Auto-generated by generate-constraint-definitions.py
// Do not edit by hand!
class Constr_XlessthanY : public Constraint {
	public:

		const IntVarID fX, fY;

		Constr_XlessthanY(IntVarID x, IntVarID y)
			 : Constraint(Constraints::XlessthanY), fX(x), fY(y) { } 
};

class Constr_XlesseqthanY : public Constraint {
	public:

		const IntVarID fX, fY;

		Constr_XlesseqthanY(IntVarID x, IntVarID y)
			 : Constraint(Constraints::XlesseqthanY), fX(x), fY(y) { } 
};

class Constr_XeqAbsY : public Constraint {
	public:

		const IntVarID fX, fY;

		Constr_XeqAbsY(IntVarID x, IntVarID y)
			 : Constraint(Constraints::XeqAbsY), fX(x), fY(y) { } 
};

class Constr_XeqY : public Constraint {
	public:

		const IntVarID fX, fY;

		Constr_XeqY(IntVarID x, IntVarID y)
			 : Constraint(Constraints::XeqY), fX(x), fY(y) { } 
};

class Constr_XneqY : public Constraint {
	public:

		const IntVarID fX, fY;

		Constr_XneqY(IntVarID x, IntVarID y)
			 : Constraint(Constraints::XneqY), fX(x), fY(y) { } 
};

class Constr_XorY : public Constraint {
	public:

		const IntVarID fX, fY;
		const bool fNeg;

		Constr_XorY(IntVarID x, IntVarID y, bool neg)
			 : Constraint(Constraints::XorY), fX(x), fY(y), fNeg(neg) { } 
};

class Constr_XeqYplusC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_XeqYplusC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::XeqYplusC), fX(x), fY(y), fC(c) { } 
};

class Constr_XeqYdivC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_XeqYdivC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::XeqYdivC), fX(x), fY(y), fC(c) { } 
};

class Constr_XeqYtimesC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_XeqYtimesC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::XeqYtimesC), fX(x), fY(y), fC(c) { } 
};

class Constr_XeqYmodC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_XeqYmodC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::XeqYmodC), fX(x), fY(y), fC(c) { } 
};

class Constr_XeqYplusZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;

		Constr_XeqYplusZ(IntVarID x, IntVarID y, IntVarID z)
			 : Constraint(Constraints::XeqYplusZ), fX(x), fY(y), fZ(z) { } 
};

class Constr_XeqYtimesZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;

		Constr_XeqYtimesZ(IntVarID x, IntVarID y, IntVarID z)
			 : Constraint(Constraints::XeqYtimesZ), fX(x), fY(y), fZ(z) { } 
};

class Constr_XeqYmodZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;

		Constr_XeqYmodZ(IntVarID x, IntVarID y, IntVarID z)
			 : Constraint(Constraints::XeqYmodZ), fX(x), fY(y), fZ(z) { } 
};

class Constr_XeqCminusZ : public Constraint {
	public:

		const IntVarID fX;
		const Int fC;
		const IntVarID fZ;

		Constr_XeqCminusZ(IntVarID x, Int c, IntVarID z)
			 : Constraint(Constraints::XeqCminusZ), fX(x), fC(c), fZ(z) { } 
};

class Constr_XeqCdivZ : public Constraint {
	public:

		const IntVarID fX;
		const Int fC;
		const IntVarID fZ;

		Constr_XeqCdivZ(IntVarID x, Int c, IntVarID z)
			 : Constraint(Constraints::XeqCdivZ), fX(x), fC(c), fZ(z) { } 
};

class Constr_XeqCmodZ : public Constraint {
	public:

		const IntVarID fX;
		const Int fC;
		const IntVarID fZ;

		Constr_XeqCmodZ(IntVarID x, Int c, IntVarID z)
			 : Constraint(Constraints::XeqCmodZ), fX(x), fC(c), fZ(z) { } 
};

class Constr_MetaXeqYlessthanC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_MetaXeqYlessthanC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::MetaXeqYlessthanC), fX(x), fY(y), fC(c) { } 
};

class Constr_MetaXeqYlesseqthanC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_MetaXeqYlesseqthanC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::MetaXeqYlesseqthanC), fX(x), fY(y), fC(c) { } 
};

class Constr_MetaXeqYgreaterthanC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_MetaXeqYgreaterthanC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::MetaXeqYgreaterthanC), fX(x), fY(y), fC(c) { } 
};

class Constr_MetaXeqYgreatereqthanC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_MetaXeqYgreatereqthanC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::MetaXeqYgreatereqthanC), fX(x), fY(y), fC(c) { } 
};

class Constr_MetaXeqYeqC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_MetaXeqYeqC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::MetaXeqYeqC), fX(x), fY(y), fC(c) { } 
};

class Constr_MetaXeqYneqC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_MetaXeqYneqC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::MetaXeqYneqC), fX(x), fY(y), fC(c) { } 
};

class Constr_MetaXeqYlessthanZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;

		Constr_MetaXeqYlessthanZ(IntVarID x, IntVarID y, IntVarID z)
			 : Constraint(Constraints::MetaXeqYlessthanZ), fX(x), fY(y), fZ(z) { } 
};

class Constr_MetaXeqYlesseqthanZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;

		Constr_MetaXeqYlesseqthanZ(IntVarID x, IntVarID y, IntVarID z)
			 : Constraint(Constraints::MetaXeqYlesseqthanZ), fX(x), fY(y), fZ(z) { } 
};

class Constr_MetaXeqYandZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;

		Constr_MetaXeqYandZ(IntVarID x, IntVarID y, IntVarID z)
			 : Constraint(Constraints::MetaXeqYandZ), fX(x), fY(y), fZ(z) { } 
};

class Constr_MetaXeqYeqZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;
		const bool fNeg;

		Constr_MetaXeqYeqZ(IntVarID x, IntVarID y, IntVarID z, bool neg)
			 : Constraint(Constraints::MetaXeqYeqZ), fX(x), fY(y), fZ(z), fNeg(neg) { } 
};

class Constr_MetaXeqYorZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;
		const bool fNeg;

		Constr_MetaXeqYorZ(IntVarID x, IntVarID y, IntVarID z, bool neg)
			 : Constraint(Constraints::MetaXeqYorZ), fX(x), fY(y), fZ(z), fNeg(neg) { } 
};

class Constr_AllDiff : public Constraint {
	public:

		const IntVarArrayID fArr;

		Constr_AllDiff(IntVarArrayID arr)
			 : Constraint(Constraints::AllDiff), fArr(arr) { } 
};

class Constr_AllDiffStrong : public Constraint {
	public:

		const IntVarArrayID fArr;
		const UInt fCapacity;

		Constr_AllDiffStrong(IntVarArrayID arr, UInt capacity)
			 : Constraint(Constraints::AllDiffStrong), fArr(arr), fCapacity(capacity) { } 
};

class Constr_XeqSum : public Constraint {
	public:

		const IntVarID fX;
		const IntVarArrayID fArr;
		const UInt fStart, fLength;

		Constr_XeqSum(IntVarID x, IntVarArrayID arr, UInt start, UInt length)
			 : Constraint(Constraints::XeqSum), fX(x), fArr(arr), fStart(start), fLength(length) { } 
};

class Constr_XeqElement : public Constraint {
	public:

		const IntVarID fX, fIndex;
		const IntDequeID fArr;

		Constr_XeqElement(IntVarID x, IntVarID index, IntDequeID arr)
			 : Constraint(Constraints::XeqElement), fX(x), fIndex(index), fArr(arr) { } 
};

class Constr_Count : public Constraint {
	public:

		const IntVarArrayID fArr;
		const IntDequeID fValues, fOccurences;
		const std::vector<IntDequeID> fSplitpositions;
		const UInt fSplit;
		const UInt fDwin;

		Constr_Count(IntVarArrayID arr, IntDequeID values, IntDequeID occurences, std::vector<IntDequeID> splitPositions, UInt split, UInt dwin)
			 : Constraint(Constraints::Count), fArr(arr), fValues(values), fOccurences(occurences), fSplitpositions(splitPositions), fSplit(split), fDwin(dwin) { } 
};

