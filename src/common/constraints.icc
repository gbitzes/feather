// Auto-generated by generate-constraint-definitions.py
// Do not edit by hand!
class Constr_XlessthanY : public Constraint {
	public:

		const IntVarID fX, fY;

		Constr_XlessthanY(IntVarID x, IntVarID y)
			 : Constraint(Constraints::XlessthanY), fX(x), fY(y) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XlessthanY << " " <<  fX
			   << " " << fY;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			return new Constr_XlessthanY( x,y);
		}
};

class Constr_XlesseqthanY : public Constraint {
	public:

		const IntVarID fX, fY;

		Constr_XlesseqthanY(IntVarID x, IntVarID y)
			 : Constraint(Constraints::XlesseqthanY), fX(x), fY(y) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XlesseqthanY << " " <<  fX
			   << " " << fY;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			return new Constr_XlesseqthanY( x,y);
		}
};

class Constr_XeqAbsY : public Constraint {
	public:

		const IntVarID fX, fY;

		Constr_XeqAbsY(IntVarID x, IntVarID y)
			 : Constraint(Constraints::XeqAbsY), fX(x), fY(y) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqAbsY << " " <<  fX
			   << " " << fY;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			return new Constr_XeqAbsY( x,y);
		}
};

class Constr_XeqY : public Constraint {
	public:

		const IntVarID fX, fY;

		Constr_XeqY(IntVarID x, IntVarID y)
			 : Constraint(Constraints::XeqY), fX(x), fY(y) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqY << " " <<  fX
			   << " " << fY;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			return new Constr_XeqY( x,y);
		}
};

class Constr_XneqY : public Constraint {
	public:

		const IntVarID fX, fY;

		Constr_XneqY(IntVarID x, IntVarID y)
			 : Constraint(Constraints::XneqY), fX(x), fY(y) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XneqY << " " <<  fX
			   << " " << fY;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			return new Constr_XneqY( x,y);
		}
};

class Constr_XorY : public Constraint {
	public:

		const IntVarID fX, fY;
		const bool fNeg;

		Constr_XorY(IntVarID x, IntVarID y, bool neg)
			 : Constraint(Constraints::XorY), fX(x), fY(y), fNeg(neg) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XorY << " " <<  fX
			   << " " << fY
			   << " " << fNeg;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			bool neg;
			ss >> neg;
			return new Constr_XorY( x,y,neg);
		}
};

class Constr_XeqYplusC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_XeqYplusC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::XeqYplusC), fX(x), fY(y), fC(c) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqYplusC << " " <<  fX
			   << " " << fY
			   << " " << fC;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			Int c;
			ss >> c;
			return new Constr_XeqYplusC( x,y,c);
		}
};

class Constr_XeqYdivC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_XeqYdivC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::XeqYdivC), fX(x), fY(y), fC(c) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqYdivC << " " <<  fX
			   << " " << fY
			   << " " << fC;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			Int c;
			ss >> c;
			return new Constr_XeqYdivC( x,y,c);
		}
};

class Constr_XeqYtimesC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_XeqYtimesC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::XeqYtimesC), fX(x), fY(y), fC(c) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqYtimesC << " " <<  fX
			   << " " << fY
			   << " " << fC;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			Int c;
			ss >> c;
			return new Constr_XeqYtimesC( x,y,c);
		}
};

class Constr_XeqYmodC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_XeqYmodC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::XeqYmodC), fX(x), fY(y), fC(c) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqYmodC << " " <<  fX
			   << " " << fY
			   << " " << fC;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			Int c;
			ss >> c;
			return new Constr_XeqYmodC( x,y,c);
		}
};

class Constr_XeqYplusZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;

		Constr_XeqYplusZ(IntVarID x, IntVarID y, IntVarID z)
			 : Constraint(Constraints::XeqYplusZ), fX(x), fY(y), fZ(z) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqYplusZ << " " <<  fX
			   << " " << fY
			   << " " << fZ;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			IntVarID z;
			ss >> z;
			return new Constr_XeqYplusZ( x,y,z);
		}
};

class Constr_XeqYtimesZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;

		Constr_XeqYtimesZ(IntVarID x, IntVarID y, IntVarID z)
			 : Constraint(Constraints::XeqYtimesZ), fX(x), fY(y), fZ(z) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqYtimesZ << " " <<  fX
			   << " " << fY
			   << " " << fZ;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			IntVarID z;
			ss >> z;
			return new Constr_XeqYtimesZ( x,y,z);
		}
};

class Constr_XeqYmodZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;

		Constr_XeqYmodZ(IntVarID x, IntVarID y, IntVarID z)
			 : Constraint(Constraints::XeqYmodZ), fX(x), fY(y), fZ(z) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqYmodZ << " " <<  fX
			   << " " << fY
			   << " " << fZ;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			IntVarID z;
			ss >> z;
			return new Constr_XeqYmodZ( x,y,z);
		}
};

class Constr_XeqCminusY : public Constraint {
	public:

		const IntVarID fX;
		const Int fC;
		const IntVarID fY;

		Constr_XeqCminusY(IntVarID x, Int c, IntVarID y)
			 : Constraint(Constraints::XeqCminusY), fX(x), fC(c), fY(y) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqCminusY << " " <<  fX
			   << " " << fC
			   << " " << fY;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			Int c;
			ss >> c;
			IntVarID y;
			ss >> y;
			return new Constr_XeqCminusY( x,c,y);
		}
};

class Constr_XeqCdivY : public Constraint {
	public:

		const IntVarID fX;
		const Int fC;
		const IntVarID fY;

		Constr_XeqCdivY(IntVarID x, Int c, IntVarID y)
			 : Constraint(Constraints::XeqCdivY), fX(x), fC(c), fY(y) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqCdivY << " " <<  fX
			   << " " << fC
			   << " " << fY;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			Int c;
			ss >> c;
			IntVarID y;
			ss >> y;
			return new Constr_XeqCdivY( x,c,y);
		}
};

class Constr_XeqCmodY : public Constraint {
	public:

		const IntVarID fX;
		const Int fC;
		const IntVarID fY;

		Constr_XeqCmodY(IntVarID x, Int c, IntVarID y)
			 : Constraint(Constraints::XeqCmodY), fX(x), fC(c), fY(y) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqCmodY << " " <<  fX
			   << " " << fC
			   << " " << fY;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			Int c;
			ss >> c;
			IntVarID y;
			ss >> y;
			return new Constr_XeqCmodY( x,c,y);
		}
};

class Constr_MetaXeqYlessthanC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_MetaXeqYlessthanC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::MetaXeqYlessthanC), fX(x), fY(y), fC(c) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::MetaXeqYlessthanC << " " <<  fX
			   << " " << fY
			   << " " << fC;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			Int c;
			ss >> c;
			return new Constr_MetaXeqYlessthanC( x,y,c);
		}
};

class Constr_MetaXeqYlesseqthanC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_MetaXeqYlesseqthanC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::MetaXeqYlesseqthanC), fX(x), fY(y), fC(c) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::MetaXeqYlesseqthanC << " " <<  fX
			   << " " << fY
			   << " " << fC;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			Int c;
			ss >> c;
			return new Constr_MetaXeqYlesseqthanC( x,y,c);
		}
};

class Constr_MetaXeqYgreaterthanC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_MetaXeqYgreaterthanC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::MetaXeqYgreaterthanC), fX(x), fY(y), fC(c) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::MetaXeqYgreaterthanC << " " <<  fX
			   << " " << fY
			   << " " << fC;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			Int c;
			ss >> c;
			return new Constr_MetaXeqYgreaterthanC( x,y,c);
		}
};

class Constr_MetaXeqYgreatereqthanC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_MetaXeqYgreatereqthanC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::MetaXeqYgreatereqthanC), fX(x), fY(y), fC(c) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::MetaXeqYgreatereqthanC << " " <<  fX
			   << " " << fY
			   << " " << fC;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			Int c;
			ss >> c;
			return new Constr_MetaXeqYgreatereqthanC( x,y,c);
		}
};

class Constr_MetaXeqYeqC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_MetaXeqYeqC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::MetaXeqYeqC), fX(x), fY(y), fC(c) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::MetaXeqYeqC << " " <<  fX
			   << " " << fY
			   << " " << fC;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			Int c;
			ss >> c;
			return new Constr_MetaXeqYeqC( x,y,c);
		}
};

class Constr_MetaXeqYneqC : public Constraint {
	public:

		const IntVarID fX, fY;
		const Int fC;

		Constr_MetaXeqYneqC(IntVarID x, IntVarID y, Int c)
			 : Constraint(Constraints::MetaXeqYneqC), fX(x), fY(y), fC(c) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::MetaXeqYneqC << " " <<  fX
			   << " " << fY
			   << " " << fC;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			Int c;
			ss >> c;
			return new Constr_MetaXeqYneqC( x,y,c);
		}
};

class Constr_MetaXeqYlessthanZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;

		Constr_MetaXeqYlessthanZ(IntVarID x, IntVarID y, IntVarID z)
			 : Constraint(Constraints::MetaXeqYlessthanZ), fX(x), fY(y), fZ(z) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::MetaXeqYlessthanZ << " " <<  fX
			   << " " << fY
			   << " " << fZ;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			IntVarID z;
			ss >> z;
			return new Constr_MetaXeqYlessthanZ( x,y,z);
		}
};

class Constr_MetaXeqYlesseqthanZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;

		Constr_MetaXeqYlesseqthanZ(IntVarID x, IntVarID y, IntVarID z)
			 : Constraint(Constraints::MetaXeqYlesseqthanZ), fX(x), fY(y), fZ(z) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::MetaXeqYlesseqthanZ << " " <<  fX
			   << " " << fY
			   << " " << fZ;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			IntVarID z;
			ss >> z;
			return new Constr_MetaXeqYlesseqthanZ( x,y,z);
		}
};

class Constr_MetaXeqYandZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;

		Constr_MetaXeqYandZ(IntVarID x, IntVarID y, IntVarID z)
			 : Constraint(Constraints::MetaXeqYandZ), fX(x), fY(y), fZ(z) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::MetaXeqYandZ << " " <<  fX
			   << " " << fY
			   << " " << fZ;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			IntVarID z;
			ss >> z;
			return new Constr_MetaXeqYandZ( x,y,z);
		}
};

class Constr_MetaXeqYeqZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;
		const bool fNeg;

		Constr_MetaXeqYeqZ(IntVarID x, IntVarID y, IntVarID z, bool neg)
			 : Constraint(Constraints::MetaXeqYeqZ), fX(x), fY(y), fZ(z), fNeg(neg) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::MetaXeqYeqZ << " " <<  fX
			   << " " << fY
			   << " " << fZ
			   << " " << fNeg;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			IntVarID z;
			ss >> z;
			bool neg;
			ss >> neg;
			return new Constr_MetaXeqYeqZ( x,y,z,neg);
		}
};

class Constr_MetaXeqYorZ : public Constraint {
	public:

		const IntVarID fX, fY, fZ;
		const bool fNeg;

		Constr_MetaXeqYorZ(IntVarID x, IntVarID y, IntVarID z, bool neg)
			 : Constraint(Constraints::MetaXeqYorZ), fX(x), fY(y), fZ(z), fNeg(neg) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::MetaXeqYorZ << " " <<  fX
			   << " " << fY
			   << " " << fZ
			   << " " << fNeg;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID y;
			ss >> y;
			IntVarID z;
			ss >> z;
			bool neg;
			ss >> neg;
			return new Constr_MetaXeqYorZ( x,y,z,neg);
		}
};

class Constr_AllDiff : public Constraint {
	public:

		const IntVarArrayID fArr;

		Constr_AllDiff(IntVarArrayID arr)
			 : Constraint(Constraints::AllDiff), fArr(arr) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::AllDiff << " " <<  fArr;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarArrayID arr;
			ss >> arr;
			return new Constr_AllDiff( arr);
		}
};

class Constr_AllDiffStrong : public Constraint {
	public:

		const IntVarArrayID fArr;
		const UInt fCapacity;

		Constr_AllDiffStrong(IntVarArrayID arr, UInt capacity)
			 : Constraint(Constraints::AllDiffStrong), fArr(arr), fCapacity(capacity) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::AllDiffStrong << " " <<  fArr
			   << " " << fCapacity;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarArrayID arr;
			ss >> arr;
			UInt capacity;
			ss >> capacity;
			return new Constr_AllDiffStrong( arr,capacity);
		}
};

class Constr_XeqSum : public Constraint {
	public:

		const IntVarID fX;
		const IntVarArrayID fArr;
		const UInt fStart, fLength;

		Constr_XeqSum(IntVarID x, IntVarArrayID arr, UInt start, UInt length)
			 : Constraint(Constraints::XeqSum), fX(x), fArr(arr), fStart(start), fLength(length) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqSum << " " <<  fX
			   << " " << fArr
			   << " " << fStart
			   << " " << fLength;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarArrayID arr;
			ss >> arr;
			UInt start;
			ss >> start;
			UInt length;
			ss >> length;
			return new Constr_XeqSum( x,arr,start,length);
		}
};

class Constr_XeqElement : public Constraint {
	public:

		const IntVarID fX, fIndex;
		const IntDequeID fArr;

		Constr_XeqElement(IntVarID x, IntVarID index, IntDequeID arr)
			 : Constraint(Constraints::XeqElement), fX(x), fIndex(index), fArr(arr) { } 
		virtual std::string serialize() const {
			std::ostringstream os;
			os << "CONSTR " << Constraints::XeqElement << " " <<  fX
			   << " " << fIndex
			   << " " << fArr;
			return os.str();
		}
		static Constraint* deserialize(std::string s) {
			std::stringstream ss(s);
			IntVarID x;
			ss >> x;
			IntVarID index;
			ss >> index;
			IntDequeID arr;
			ss >> arr;
			return new Constr_XeqElement( x,index,arr);
		}
};

