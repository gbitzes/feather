#!/usr/bin/env python

import sys

# A script to generate C++ code of the constraint
# class definitions

allConstraints = []

def fieldstyle(name):
	return "f" + name.capitalize()

def define(name, contents):
	allConstraints.append(name)
	print("class Constr_{name} : public Constraint {{\n\tpublic:\n".format(name=name))

	for t in contents:
		print("\t\tconst {} {};".format(t[0], ", ".join(fieldstyle(x) for x in t[1]) ) )

	parameters = []
	for t in contents:
		for var in t[1]:
			parameters.append( "{} {}".format(t[0], var ) )

	parameters = ", ".join(parameters)
	print("\n\t\tConstr_{}({})".format(name, parameters))

	allvars = []
	for x in contents:
		allvars += x[1]

	initializer_list = ", ".join(["{}({})".format(fieldstyle(var), var) for var in allvars ]   )

	print("\t\t\t : Constraint(Constraints::{}), ".format(name) + initializer_list) + " { } "

        print("\t\tvirtual std::string serialize() const {")
        print("\t\t\tstd::ostringstream os;")
        print("\t\t\tos << \"CONSTR \" << Constraints::" + name + " << \" \" << "),
        print("\n\t\t\t   << \" \" << ".join([fieldstyle(v) for v in allvars]) + ";")
        print("\t\t\treturn os.str();")
        print("\t\t}")

        print("\t\tstatic Constraint* deserialize(std::string s) {")
        print("\t\t\tstd::stringstream ss(s);")
        for t in contents:
                for var in t[1]:
                        print("\t\t\t{} {};".format(t[0], var))
                        print("\t\t\tss >> {};".format(var))

        print("\t\t\treturn new Constr_{}(".format(name)),
        print(",".join(allvars) + ");")
        print("\t\t}")
	print("};\n")

def define_XopY(name):
	define(name,
			[
				["IntVarID", ["x", "y"]]
			])

def define_XopYneg(name):
	define(name,
			[
				["IntVarID", ["x", "y"]],
				["bool", ["neg"]]
			])


def define_XeqYopC(name):
	define(name, 
		  	[ 
		  	  ["IntVarID", ["x", "y"]],
		  	  ["Int", ["c"]]
		  	] 
		  )

def define_XeqYopZ(name):
	define(name, 
		    [  
		      ["IntVarID", ["x", "y", "z"]]
		    ]
		  )

def define_XeqYopZneg(name):
	define(name, 
		    [  
		      ["IntVarID", ["x", "y", "z"]],
		      ["bool", ["neg"]]
		    ]
		  )

def define_XeqCopY(name):
	define(name, 
		  	[ 
		  	  ["IntVarID", ["x"]],
		  	  ["Int", ["c"]],
		  	  ["IntVarID", ["y"]]
		  	] 
		  )



if __name__ == '__main__':
	print("// Auto-generated by generate-constraint-definitions.py")
	print("// Do not edit by hand!")

	define_XopY("XlessthanY")
	define_XopY("XlesseqthanY")
	define_XopY("XeqAbsY")
	define_XopY("XeqY")
	define_XopY("XneqY")

	define_XopYneg("XorY")

	define_XeqYopC("XeqYplusC")
	define_XeqYopC("XeqYdivC")
	define_XeqYopC("XeqYtimesC")
	define_XeqYopC("XeqYmodC")

	define_XeqYopZ("XeqYplusZ")
	define_XeqYopZ("XeqYtimesZ")
	define_XeqYopZ("XeqYmodZ")

	define_XeqCopY("XeqCminusY")
	define_XeqCopY("XeqCdivY")
	define_XeqCopY("XeqCmodY")

	define_XeqYopC("MetaXeqYlessthanC")
	define_XeqYopC("MetaXeqYlesseqthanC")
	define_XeqYopC("MetaXeqYgreaterthanC")
	define_XeqYopC("MetaXeqYgreatereqthanC")
	define_XeqYopC("MetaXeqYeqC")
	define_XeqYopC("MetaXeqYneqC")

	define_XeqYopZ("MetaXeqYlessthanZ")
	define_XeqYopZ("MetaXeqYlesseqthanZ")
	define_XeqYopZ("MetaXeqYandZ")

	define_XeqYopZneg("MetaXeqYeqZ")
	define_XeqYopZneg("MetaXeqYorZ")


	define("AllDiff", 
		  	[ 
		  	  ["IntVarArrayID", ["arr"]]
		  	] 
		  )

	define("AllDiffStrong", 
		  	[ 
		  	  ["IntVarArrayID", ["arr"]],
		  	  ["UInt", ["capacity"]]
		  	]
		  )

	define("XeqSum", 
		  	[ 
		  	  ["IntVarID", ["x"]],
		  	  ["IntVarArrayID", ["arr"]],
		  	  ["UInt", ["start", "length"]]
		  	]
		  )

	define("XeqElement",
		  	[
		  	  ["IntVarID", ["x", "index"]],
		  	  ["IntDequeID", ["arr"]]
		  	]
		  )

	# define("Count",
	# 		[
	# 			["IntVarArrayID", ["arr"]],
	# 			["IntDequeID", ["values", "occurences"] ],
	# 			["std::vector<IntDequeID>", ["splitPositions"]],
	# 			["UInt", ["split"]],
	# 			["UInt", ["dwin"]]
	# 		]
	# 	  )
        #

	if len(sys.argv) > 1:
		print ",\n".join(allConstraints)
